<?php
/**
 * FieldScore
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Here
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Geocoding and Search API v1
 *
 * This document describes the Geocoding and Search API.
 *
 * The version of the OpenAPI document: 1.59
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Here\Model;

use \ArrayAccess;
use \Here\ObjectSerializer;

/**
 * FieldScore Class Doc Comment
 *
 * @category Class
 * @package  Here
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FieldScore implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FieldScore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'double',
        'country_code' => 'double',
        'state' => 'double',
        'state_code' => 'double',
        'county' => 'double',
        'county_code' => 'double',
        'city' => 'double',
        'district' => 'double',
        'subdistrict' => 'double',
        'streets' => 'double[]',
        'block' => 'double',
        'subblock' => 'double',
        'house_number' => 'double',
        'postal_code' => 'double',
        'building' => 'double',
        'unit' => 'double',
        'place_name' => 'double',
        'ontology_name' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => 'double',
        'country_code' => 'double',
        'state' => 'double',
        'state_code' => 'double',
        'county' => 'double',
        'county_code' => 'double',
        'city' => 'double',
        'district' => 'double',
        'subdistrict' => 'double',
        'streets' => 'double',
        'block' => 'double',
        'subblock' => 'double',
        'house_number' => 'double',
        'postal_code' => 'double',
        'building' => 'double',
        'unit' => 'double',
        'place_name' => 'double',
        'ontology_name' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'country_code' => 'countryCode',
        'state' => 'state',
        'state_code' => 'stateCode',
        'county' => 'county',
        'county_code' => 'countyCode',
        'city' => 'city',
        'district' => 'district',
        'subdistrict' => 'subdistrict',
        'streets' => 'streets',
        'block' => 'block',
        'subblock' => 'subblock',
        'house_number' => 'houseNumber',
        'postal_code' => 'postalCode',
        'building' => 'building',
        'unit' => 'unit',
        'place_name' => 'placeName',
        'ontology_name' => 'ontologyName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'country_code' => 'setCountryCode',
        'state' => 'setState',
        'state_code' => 'setStateCode',
        'county' => 'setCounty',
        'county_code' => 'setCountyCode',
        'city' => 'setCity',
        'district' => 'setDistrict',
        'subdistrict' => 'setSubdistrict',
        'streets' => 'setStreets',
        'block' => 'setBlock',
        'subblock' => 'setSubblock',
        'house_number' => 'setHouseNumber',
        'postal_code' => 'setPostalCode',
        'building' => 'setBuilding',
        'unit' => 'setUnit',
        'place_name' => 'setPlaceName',
        'ontology_name' => 'setOntologyName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'country_code' => 'getCountryCode',
        'state' => 'getState',
        'state_code' => 'getStateCode',
        'county' => 'getCounty',
        'county_code' => 'getCountyCode',
        'city' => 'getCity',
        'district' => 'getDistrict',
        'subdistrict' => 'getSubdistrict',
        'streets' => 'getStreets',
        'block' => 'getBlock',
        'subblock' => 'getSubblock',
        'house_number' => 'getHouseNumber',
        'postal_code' => 'getPostalCode',
        'building' => 'getBuilding',
        'unit' => 'getUnit',
        'place_name' => 'getPlaceName',
        'ontology_name' => 'getOntologyName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = $data['country'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['state_code'] = $data['state_code'] ?? null;
        $this->container['county'] = $data['county'] ?? null;
        $this->container['county_code'] = $data['county_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['district'] = $data['district'] ?? null;
        $this->container['subdistrict'] = $data['subdistrict'] ?? null;
        $this->container['streets'] = $data['streets'] ?? null;
        $this->container['block'] = $data['block'] ?? null;
        $this->container['subblock'] = $data['subblock'] ?? null;
        $this->container['house_number'] = $data['house_number'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['building'] = $data['building'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['place_name'] = $data['place_name'] ?? null;
        $this->container['ontology_name'] = $data['ontology_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return double|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param double|null $country Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return double|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param double|null $country_code Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return double|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param double|null $state Indicates how good the result state name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return double|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param double|null $state_code Indicates how good the result state code matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets county
     *
     * @return double|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param double|null $county Indicates how good the result county name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets county_code
     *
     * @return double|null
     */
    public function getCountyCode()
    {
        return $this->container['county_code'];
    }

    /**
     * Sets county_code
     *
     * @param double|null $county_code Indicates how good the result county code matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setCountyCode($county_code)
    {
        $this->container['county_code'] = $county_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return double|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param double|null $city Indicates how good the result city name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets district
     *
     * @return double|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param double|null $district Indicates how good the result district name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setDistrict($district)
    {
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets subdistrict
     *
     * @return double|null
     */
    public function getSubdistrict()
    {
        return $this->container['subdistrict'];
    }

    /**
     * Sets subdistrict
     *
     * @param double|null $subdistrict Indicates how good the result sub-district name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setSubdistrict($subdistrict)
    {
        $this->container['subdistrict'] = $subdistrict;

        return $this;
    }

    /**
     * Gets streets
     *
     * @return double[]|null
     */
    public function getStreets()
    {
        return $this->container['streets'];
    }

    /**
     * Sets streets
     *
     * @param double[]|null $streets Indicates how good the result street names match to the freeform or qualified input. If the input contains multiple street names, the field score is calculated and returned for each of them individually.
     *
     * @return self
     */
    public function setStreets($streets)
    {
        $this->container['streets'] = $streets;

        return $this;
    }

    /**
     * Gets block
     *
     * @return double|null
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param double|null $block Indicates how good the result block name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets subblock
     *
     * @return double|null
     */
    public function getSubblock()
    {
        return $this->container['subblock'];
    }

    /**
     * Sets subblock
     *
     * @param double|null $subblock Indicates how good the result sub-block name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setSubblock($subblock)
    {
        $this->container['subblock'] = $subblock;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return double|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param double|null $house_number Indicates how good the result house number matches to the freeform or qualified input. It may happen, that the house number, which one is looking for, is not yet in the map data. For such cases, the /geocode returns the nearest known house number on the same street. This represents the numeric difference between the requested and the returned house numbers.
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return double|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param double|null $postal_code Indicates how good the result postal code matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets building
     *
     * @return double|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param double|null $building Indicates how good the result building name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setBuilding($building)
    {
        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return double|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param double|null $unit Indicates how good the result unit (such as a micro point address) matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets place_name
     *
     * @return double|null
     */
    public function getPlaceName()
    {
        return $this->container['place_name'];
    }

    /**
     * Sets place_name
     *
     * @param double|null $place_name Indicates how good the result place name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setPlaceName($place_name)
    {
        $this->container['place_name'] = $place_name;

        return $this;
    }

    /**
     * Gets ontology_name
     *
     * @return double|null
     */
    public function getOntologyName()
    {
        return $this->container['ontology_name'];
    }

    /**
     * Sets ontology_name
     *
     * @param double|null $ontology_name Indicates how good the result ontology name matches to the freeform or qualified input.
     *
     * @return self
     */
    public function setOntologyName($ontology_name)
    {
        $this->container['ontology_name'] = $ontology_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


